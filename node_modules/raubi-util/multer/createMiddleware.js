const Busboy = require("busboy");
const is = require("type-is");
const onFinished = require("on-finished");
const appendField = require("append-field");
const Append = require("./appendData");
const Counter = require("./counter");

function createMiddleware(options) {
  return function(req, res, next) {
    if (!is(req, ["multipart"])) return next();
    const { fieldname, limits, storage, strategy } = options();

    const appender = new Append(strategy, req);
    const counter = new Counter();
    var isreading = false;

    const busboy = new Busboy({
      headers: req.headers,
      limits: { files: limits }
    });

    function done(err) {
      req.unpipe(busboy);
      drainStream(req);
      busboy.removeAllListeners();
      onFinished(req, () => next());
      next();
    }

    function checkDone() {
      if (isreading && counter.isZero()) return done();
    }

    busboy.on(
      "file",
      (field_name, filestream, filename, encoding, mimetype) => {
        if (field_name != fieldname)
          return res.status(404).json({ error: "File not found" });

        const file = {
          fieldname: field_name,
          originalname: filename,
          encoding: encoding,
          mimetype: mimetype
        };

        Object.defineProperty(file, "stream", {
          configurable: true,
          enumerable: false,
          value: filestream
        });

        counter.increment();

        counter.onFinish(() => {
          checkDone();
        });

        storage._handleFile(req, file, (err, info) => {
          if (err) return done(err);
          appender.addField(info);
          counter.decrement();
          return checkDone();
        });
      }
    );

    busboy.on("field", (fieldname, value, fieldnameTruncated, valTruncated) => {
      appendField(req.body, fieldname, value);
    });

    busboy.on("finish", () => {
      isreading = true;
      checkDone();
    });

    req.pipe(busboy);
  };
}

function drainStream(stream) {
  stream.on("readable", stream.read.bind(stream));
}

module.exports = createMiddleware;
