const fs = require("fs");
const path = require("path");

function Storage(options) {
  this.destination = options.destination;
  this.filename = options.filename;
}

function formaybyte(bytes) {
  var sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  if (bytes == 0) return "0 Byte";
  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
  return Math.round((bytes / Math.pow(1024, i)) * 10) / 10 + " " + sizes[i];
}

Storage.prototype._handleFile = function _handleFile(req, file, cb) {
  const that = this;
  this.destination(req, file, (err, location) => {
    if (err) return cb(err, null);
    that.filename(req, file, (err, filename) => {
      if (err) return cb(err, null);
      const finalpath = path.join(location, filename);
      const outstream = fs.createWriteStream(finalpath);
      file.stream.pipe(outstream);
      outstream.on("error", cb);
      outstream.on("finish", () => {
        cb(null, {
          destination: location,
          ...file,
          path: finalpath,
          filename: filename,
          filesize: formaybyte(outstream.bytesWritten),
          rawfilesize: outstream.bytesWritten
        });
      });
    });
  });
};

module.exports = function(options) {
  return new Storage(options);
};
